name: Docker Image CI

on:
  workflow_dispatch:
  push:
   branches: [ "main"]
  # pull_request:
  #  branches: [ "main" ]

jobs:

  sonar-test-code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: |
          cd flask && pip install -r requirements.txt
          python -m pip install --upgrade pip
          pip install pytest pytest-cov

      # - name: Run Tests & Generate Coverage Report
      #   run: |
      #     pytest --cov=. --cov-report=xml #since it doesn't have any tests, this line is commented.

      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:

    runs-on: ubuntu-latest
    needs: sonar-test-code

    steps:
    - uses: actions/checkout@v4

    - name: Set secrets as environment variables
      run: |
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV

    - name: Build and push the Docker images 
      run: bash scripts/build-docker.sh #BE image and #FED image  
      env:
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Verify AWS Authentication
      run: |
        aws sts get-caller-identity

    - name: Private Key to EC2
      env:
          PRIVATE_KEY: ${{ secrets.AWS_KEY }}
      run: |
          mkdir -p ~/.private
          echo "$PRIVATE_KEY" > ~/.private/aws_key.pem
          chmod 400 ~/.private/aws_key.pem

    - name: Terraform Init & Apply
      run: |
        cd terraform/
        terraform init
        terraform plan -out=plan.out
        terraform apply -auto-approve

    - name: Terraform Output
      id: tf_out
      run: |
        cd terraform/
        echo "EC2_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV
      shell: bash

    - name: SSH and Docker compose
      run: |
        pwd
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.private/aws_key.pem ubuntu@${{ env.EC2_IP }} << EOF
          cd /home/ubuntu/
          EC2_IP="${{ env.EC2_IP }}"        
          bash docker.sh
          docker-compose up -d
        EOF
      env:
        EC2_IP: ${{ env.EC2_IP }}